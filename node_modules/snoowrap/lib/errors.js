'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RateLimitWarning = exports.MissingUserAgentError = exports.NoCredentialsError = exports.InvalidMethodCallError = exports.InvalidUserError = exports.RateLimitError = undefined;

var _isString2 = require('lodash/isString');

var _isString3 = _interopRequireDefault(_isString2);

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _constants = require('./constants.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable max-len */


function sub_error(name, default_message) {
  function SubclassedError(message) {
    if (!(this instanceof SubclassedError)) {
      return new SubclassedError(message);
    }
    const property_options = { configurable: true, writable: true, enumerable: false };
    Object.defineProperty(this, 'message', _extends({}, property_options, { value: (0, _isString3.default)(message) ? message : default_message }));
    Object.defineProperty(this, 'name', _extends({}, property_options, { value: name }));
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      Error.call(this);
    }
  }
  function TempSubclass() {
    this.constructor = SubclassedError;
  }
  TempSubclass.prototype = Error.prototype;
  SubclassedError.prototype = new TempSubclass();
  return SubclassedError;
}

const RateLimitError = exports.RateLimitError = sub_error('RateLimitError', _constants.MODULE_NAME + ' refused to continue because reddit\'s ratelimit was exceeded. For more information about reddit\'s ratelimit, please consult reddit\'s API rules at ' + _constants.API_RULES_LINK + '.');
const InvalidUserError = exports.InvalidUserError = sub_error('InvalidUserError, Cannot fetch information on the given user. Please be sure you have the right username.');
const InvalidMethodCallError = exports.InvalidMethodCallError = sub_error('InvalidMethodCallError', '');
const NoCredentialsError = exports.NoCredentialsError = sub_error('NoCredentialsError', 'Missing credentials passed to ' + _constants.MODULE_NAME + ' constructor. You must pass an object containing either (a) user_agent, client_id, client_secret, and refresh_token properties, or (b) user_agent and access_token properties. For information, please read the docs at ' + _constants.DOCS_LINK + '.');
const MissingUserAgentError = exports.MissingUserAgentError = sub_error('MissingUserAgentError', 'You must supply an object with the user_agent property to the snoowrap constructor. For more details on user_agent strings, please see: ' + _constants.API_RULES_LINK);
const RateLimitWarning = exports.RateLimitWarning = milliseconds_until_reset => 'Warning: ' + _constants.MODULE_NAME + ' temporarily stopped sending requests because reddit\'s ratelimit was exceeded. The request you attempted to send was queued, and will be sent to reddit when the current ratelimit period expires in ' + milliseconds_until_reset / 1000 + ' seconds.';