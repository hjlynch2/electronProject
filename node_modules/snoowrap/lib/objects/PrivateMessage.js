'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _helpers = require('../helpers.js');

var _ReplyableContent = require('./ReplyableContent.js');

var _ReplyableContent2 = _interopRequireDefault(_ReplyableContent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
* A class representing a private message or a modmail.
* <style> #PrivateMessage {display: none} </style>
* @example
*
* // Get a Private Message with a given ID
* r.get_message('51shnw')
* @extends ReplyableContent
*/
const PrivateMessage = class extends _ReplyableContent2.default {
  get _uri() {
    return 'message/messages/' + this.name.slice(3);
  }
  _transform_api_response(response_obj) {
    response_obj[0].replies = (0, _helpers.build_replies_tree)(response_obj[0].replies);
    return (0, _helpers.find_message_in_tree)(this.name, response_obj[0]);
  }
  // TODO: Get rid of the repeated code here, most of these methods are exactly the same with the exception of the URIs
  /**
  * @summary Marks this message as read.
  * @returns {Promise} A Promise that fulfills with this message after the request is complete
  * @example r.get_message('51shxv').mark_as_read()
  */
  mark_as_read() {
    return this._r.mark_messages_as_read([this]).return(this);
  }
  /**
  * @summary Marks this message as unread.
  * @returns {Promise} A Promise that fulfills with this message after the request is complete
  * @example r.get_message('51shxv').mark_as_unread()
  */
  mark_as_unread() {
    return this._r.mark_messages_as_unread([this]).return(this);
  }
  /**
  * @summary Mutes the author of this message for 72 hours. This can only be used on moderator mail.
  * @returns {Promise} A Promise that fulfills with this message after the request is complete
  * @example r.get_message('51shxv').mute_author()
  */
  mute_author() {
    return this._post({ uri: 'api/mute_message_author', form: { id: this.name } }).return(this);
  }
  /**
  * @summary Unmutes the author of this message.
  * @returns {Promise} A Promise that fulfills with this message after the request is complete
  * @example r.get_message('51shxv').unmute_author()
  */
  unmute_author() {
    return this._post({ uri: 'api/unmute_message_author', form: { id: this.name } }).return(this);
  }
};

exports.default = PrivateMessage;